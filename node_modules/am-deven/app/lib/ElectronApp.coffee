fs = require("fs")
ipc = require("ipc")
np = new (require("am-node-parts"))
$ = require("jquery")

class ExternalSite
  webview: null
  ready_flag: 0
  constructor: (@selector, @dom, @src, which = "append", @width = "100%", @height = "640px") ->
    webview = """
      <webview id="#{@selector}" preload="./electron/WebView.js" src="#{@src}"
        style="width:#{@width}; height:#{@height}; display: block; overflow: hidden;" nodeintegration>
      </webview>
    """
    @$webview = $(webview)
    @webview = @$webview[0]
    $(@dom)[which](@webview)
    @webview_event()
    @$webview.on("did-finish-load", @finish)
    @$webview.on("new-window", (e) => @exejs("location.href = '#{e.url}'"))
  webview_event: ->
    @$webview.on("console-message", (e) -> console.log "%c#{e.originalEvent.message}", "color: green")
    @$webview.on("ipc-message", (e) -> console.log "%c#{e.channel} #{e.args}", "color: purple")
  #load終了後
  finish: =>
    ++@ready_flag
    console.log "webview ready"
  exejs: (code) ->
    @webview.executeJavaScript code

module.exports = class ElectronApp
  _inspector: 1
  #module
  #class
  ExternalSite: ExternalSite
  constructor: ->
  start: ->
    @init()
    @live_reload()
  ### 信頼しているメソッドなるべくフロー順 ###
  init: ->
    if @_inspector then @auto_inspector()
    ipc.on("browser send msg",(msg) -> console.log("%cfrom Browser, %c#{msg}", "color: gray", "color: blue"))
  auto_inspector: ->
    $(document).on "mousedown", (e) ->
      if e.button is 2
        obj =
          x: e.clientX
          y: e.clientY
        ipc.send('inspect element', obj, "mainWindow")
  live_reload: ->
    #Watcher
    _watcher_callback = (loc, eventname, filename) =>
      return if filename.match(/\.(map|coffee)/)
      if @_start_flag then return else @_start_flag = true
      location.reload()
    fs.watch("./app/index.html", _watcher_callback)
    np.watch_dir_tree("./", [/\/(app|test)\/lib\//, /\/am-node-parts\/lib\//], _watcher_callback)
    # TODO: CSS reload, web and electron app
