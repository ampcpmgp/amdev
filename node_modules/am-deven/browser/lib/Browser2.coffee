require('crash-reporter').start()
app = require('app')
BrowserWindow = require('browser-window')
ipc = require("ipc")
exec = require("child_process").exec
fork = require("child_process").fork
fs = require("fs")
fse = require("fs-extra")
chokidar = require("chokidar")
cson = require("cson")
mainWindow = null

class Watcher
  restart: =>
    cmd = fse.readJsonSync("package.json").scripts.electron
    exec(cmd)
    setTimeout(app.terminate, 0)
  start: =>
    chokidar
      .watch(["./browser/lib/", "./node_modules/am-deven/browser/lib/"])
      .on("change", (path) =>
        return unless path.match(/\.js$/)
        @restart()
      )
module.exports = class Browser
  configCson: ".config.cson"
  init: =>
    config = cson.load(@configCson)
    @option = config["browser-window"]
    @
  start: (@url) =>
    #reload
    @watcher = new Watcher()
    @watcher.start()
    #ipc
    @ipcEvent()
    #renderer
    app.on('window-all-closed', () =>
      if process.platform isnt 'darwin' then app.quit()
    )
    app.on('ready', () =>
      #make renderer
      mainWindow = new BrowserWindow(@option)
      mainWindow.setAlwaysOnTop(true)
      @url = "file://#{process.cwd()}#{@url}" unless @url.match(/^(http|\/\/)/)
      mainWindow.loadUrl(@url)
      mainWindow.openDevTools()
      mainWindow.webContents.on("did-finish-load", =>
        mainWindow.setAlwaysOnTop(false) unless @option["always-on-top"]
        )
      mainWindow.on('closed', =>
        mainWindow = null
      )
      #compiler
      @startCompiler()
    )
  ipcEvent: =>
    ipc.on("restart", @watcher.restart)
  startCompiler: ->
    fork("./node_modules/am-compiler/lib/start").on("message", @sendMsg)
  sendMsg: (msg) =>
    mainWindow?.webContents.send("browser send msg", msg)
