app = require("app")
fs = require("fs")
gaze = require("gaze")
exec = require('child_process').exec
ipc = require("ipc")
cson = require("cson")
BrowserWindow = require("browser-window")
globalShortcut = require('global-shortcut')
shell = require("shell")
np = new (require("am-node-parts"))

class Watcher
  constructor: () ->
    @check_restart_browser()
  restart_browser: ->
    cmd = JSON.parse(fs.readFileSync("package.json")).scripts.electron
    exec(cmd)
    setTimeout( ->
      app.terminate()
    , 0)
  check_restart_browser: () ->
    np.watch_dir_tree("./", /\/browser\/lib\//, (loc, eventname, filename) =>
      console.log loc, eventname, filename
      return if eventname isnt "change" # else rename
      return unless filename.match(/\.js$/)
      if @flag then return else @flag = true
      @restart_browser()
      )
module.exports = class Browser# extends @NodeJsApp
  #configuration
  ignore_dir: "./.ignore/"
  cson_path: "./.ignore/browser.cson"
  preload: "#{process.cwd()}/app/lib/app.js"
  #require
  #member
  mainWindow: 0
  constructor: (@url = "file://#{process.cwd()}/app/index.html")->
    @watcher = new Watcher(@)
    try
      result = cson.load(@cson_path)
    catch e
      result =
        x: 0
        y: 240
        width: 700
        height: 800
      fs.mkdir(@ignore_dir,=>fs.writeFile(@cson_path, cson.createCSONString(result)))
    @option =
      x: result.x
      y: result.y
      width: result.width
      height: result.height
      #show: (false) # headless window
      preload: @preload
      "always-on-top": true
  start: ->
    require("crash-reporter").start()
    @ipc_event()
    @app_start()
  ipc_event: ->
    ipc
      .on('inspect element', (e, arg, renderer) => @[renderer].inspectElement(arg.x, arg.y))
      .on("restart", @watcher.restart_browser)
  app_start: ->
    app.on("window-all-closed", ->
      app.quit() unless process.platform is "darwin"
    )
    app.on("ready", =>
      @make_window()
      @etc()
    )
  make_window: ->
    @mainWindow = new BrowserWindow(@option)
    @mainWindow.webContents.on("did-finish-load", =>
      @mainWindow.setAlwaysOnTop(false)
      console.log "load finished."
      )
    @mainWindow.loadUrl(@url)
    @mainWindow.openDevTools()
    @mainWindow.on("close", (e) =>
      return unless @mainWindow.getPosition
      xy = @mainWindow.getPosition()
      wh = @mainWindow.getSize()
      obj = cson.load(@cson_path)
      obj.x = xy[0]
      obj.y = xy[1]
      obj.width = wh[0]
      obj.height = wh[1]
      cson_string = cson.createCSONString(obj)
      fs.writeFileSync(@cson_path, cson_string)
      @mainWindow = (null)
    )
  etc: ->
    @global_shortcut()
    @start_compiler()
  global_shortcut: ->
    ret = globalShortcut.register('ctrl+e', ->
      console.log("#{Date.now()} , ctrl+e is pressed")
    )
  start_compiler: ->
    fork = require("child_process").fork
    fork("./node_modules/am-compiler/lib/start").on("message",@send_msg)
  send_msg: (msg) =>
    @mainWindow?.webContents.send("browser send msg", msg)
