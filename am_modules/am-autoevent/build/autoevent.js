/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { throw err; };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var AutoEvent, AutoEventBase,
	    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  AutoEventBase = __webpack_require__(1);

	  module.exports = AutoEvent = (function(superClass) {
	    extend(AutoEvent, superClass);

	    function AutoEvent() {
	      this.start = bind(this.start, this);
	      this.contoller = bind(this.contoller, this);
	      return AutoEvent.__super__.constructor.apply(this, arguments);
	    }

	    AutoEvent.prototype.contoller = function() {
	      var curFuncNum, i;
	      i = -1;
	      curFuncNum = 0;
	      while (this.funcs[++i]) {
	        this.innerFuncs[i].push((function(_this) {
	          return function() {
	            var base, name;
	            return typeof (base = _this.funcs)[name = ++curFuncNum] === "function" ? base[name]() : void 0;
	          };
	        })(this));
	      }
	      return this.funcs[0](curFuncNum);
	    };

	    AutoEvent.prototype.start = function() {
	      return this.contoller();
	    };

	    return AutoEvent;

	  })(AutoEventBase);

	}).call(this);


/***/ },
/* 1 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var $, AutoEvent, doc,
	    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	  doc = document;

	  doc.$ = doc.querySelector;

	  $ = doc.$;

	  module.exports = AutoEvent = (function() {
	    function AutoEvent() {
	      this.waitSelector = bind(this.waitSelector, this);
	      this.wait = bind(this.wait, this);
	      this.waitEvent = bind(this.waitEvent, this);
	      this.click = bind(this.click, this);
	      this.setHtml = bind(this.setHtml, this);
	      this.setValue = bind(this.setValue, this);
	      this.addEvent = bind(this.addEvent, this);
	      this.register = bind(this.register, this);
	    }

	    AutoEvent.prototype.register = function() {
	      this.funcs = [];
	      this.innerFuncs = [];
	      this.funcNum = -1;
	      return this;
	    };

	    AutoEvent.prototype.addEvent = function(callback) {
	      var innerFunc;
	      innerFunc = this.innerFuncs[this.funcNum];
	      innerFunc.push(callback);
	      return this;
	    };

	    AutoEvent.prototype.setValue = function(selector, value) {
	      return this.addEvent((function(_this) {
	        return function() {
	          var ref;
	          return (ref = doc.$(selector)) != null ? ref.value = value : void 0;
	        };
	      })(this));
	    };

	    AutoEvent.prototype.setHtml = function(selector, value) {
	      return this.addEvent((function(_this) {
	        return function() {
	          var ref;
	          return (ref = doc.$(selector)) != null ? ref.innerHTML = value : void 0;
	        };
	      })(this));
	    };

	    AutoEvent.prototype.click = function(selector) {
	      return this.addEvent((function(_this) {
	        return function() {
	          var ref;
	          return (ref = doc.$(selector)) != null ? ref.click() : void 0;
	        };
	      })(this));
	    };

	    AutoEvent.prototype.waitEvent = function(callback) {
	      this.funcs.push(callback);
	      return this;
	    };

	    AutoEvent.prototype.wait = function(msec) {
	      var func, funcNum, innerFunc;
	      funcNum = ++this.funcNum;
	      innerFunc = this.innerFuncs[funcNum] = [];
	      func = (function(_this) {
	        return function() {
	          var i, len, results;
	          results = [];
	          for (i = 0, len = innerFunc.length; i < len; i++) {
	            func = innerFunc[i];
	            results.push(func());
	          }
	          return results;
	        };
	      })(this);
	      return this.waitEvent((function(_this) {
	        return function() {
	          return setTimeout(func, msec);
	        };
	      })(this));
	    };

	    AutoEvent.prototype.waitSelector = function(selector, exists) {
	      var func, funcNum, innerFunc, stopTimer, testTimer;
	      if (exists == null) {
	        exists = true;
	      }
	      funcNum = ++this.funcNum;
	      innerFunc = this.innerFuncs[funcNum] = [];
	      func = (function(_this) {
	        return function() {
	          var i, len, results;
	          results = [];
	          for (i = 0, len = innerFunc.length; i < len; i++) {
	            func = innerFunc[i];
	            results.push(func());
	          }
	          return results;
	        };
	      })(this);
	      testTimer = null;
	      stopTimer = (function(_this) {
	        return function() {
	          clearInterval(testTimer);
	          return func();
	        };
	      })(this);
	      return this.waitEvent((function(_this) {
	        return function() {
	          return testTimer = setInterval(function() {
	            if ((doc.$(selector) != null) && exists) {
	              return stopTimer();
	            }
	          }, 100);
	        };
	      })(this));
	    };

	    return AutoEvent;

	  })();

	}).call(this);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  window.amAutoEvent = new (__webpack_require__(0))();

	}).call(this);


/***/ }
/******/ ]);