###製作ビジョン###
初心者には簡単に
  chromebook
  ios
  android
  mac
  windows
  linux
  --
  上記全てのOSの "最新版(最新ブラウザのみでも可)" で動くウェブアプリケーションの開発
  上記いずれにおいても開発が可能になるスタイル
上級者には詳細に
  electronを利用したアプリケーションの開発
###未着手リスト###
優先度 高
  am-common/getParamsのデコード処理
  processのデーモン化解除
  libがなければ作成 -> フォルダが無ければ自動生成
  テストコードの生成
  newでは処理を走らせないようにする。
中
  js_dom -> cheerio
低
  console.log の削除
  instant.coffee 更新無し、即時実行js
### 過去ログ ###
7/21
  web/
  am-deven/web/
  node_modues/
  am-deven/node_modules/
  の順番で見に行く
7/19
  fs.watchの動き
    dir/ 監視(event, name)
    ↓
      /tmp.txt 作成
        event = rename, name = tmp.txt
        event = change, name = tmp.txt
      ↓
      /dir2/ 作成
        event = rename, name = dir2
      ↓
      /dir2/test3.txt 作成
        event = rename, name = test3.txt
        event = change, name = test3.txt
      ↓
      /tmp.txt 名前変更 -> tmp2.txt
        event = rename, name = null
        event = rename, name = tmp2.txt
        event = change, name = tmp2.txt
      ↓
      /dir2/ -> /dir3/
        event = rename, name = null
        event = rename, name = dir3
      ↓
      /tmp.txt 編集
        event = change, name = tmp.txt
        event = change, name = tmp.txt
      ↓
      /dir2/test3.txt 編集
        #イベント発火せず
      ↓
      /dir2/test3.txt -> test4.txt
        event = change, name = dir2
        #dir名変更も同様
      ↓
      /dir2/dir3/*
        #何をしてもイベント発火せず
7/18
  watcherフロー
    new Class
    watch -> changed?
7/14
  設計見通し
    cson化
      コマンドという子プロセスの起動
      Browser起動、一旦全デフォルトでam-devenを起動する
      csonから設定されたディレクトリを読み込みに行く
      index.html起動
      app起動
      サーバー起動（csonから読み込む）
  cson vs coffee
    cson設定しても結局coffee必須なら意味なし？
    →　csonをmoduleから読み込む設定にする
7/13　設計メモ
  最小設定を記述し、まずは実行可能にする
  詳細設定を可能にし、am-devenモジュールを作りこんでいく形とする。
  amdeven側では最詳設計を組み込み、設定cson切り替えで、簡易版にも容易に切り替えられるようにする。
  --
  testの廃止検討 - am-modulesとnode-modulesの切り替えを容易にする。(config.cson)
7/12
  コンパイルが必要なファイルはsrcフォルダに入れる
  Compilerや制作完了したjs
6/15
  コンパイラjsは残す。&jsをgitignoreに再度登録。&bower導入&browserify導入してみよう
  Browserifyなど必要以上の環境構築はせずにchromiumやnodeの対応を待つ。
  2. 名前を考える - 午前の開発環境
    AMDevEn
    AmDeven
    AmDevEn
    amDevEn
  他
    共通ショートカットキーの調査とweb化検討
  理想構想図の作成　～　それに向けての実装
6/7
6/6
  開発環境のブラウザ完結vsLocalElectron
28
  webを上に持ってくる、projectの廃止。
24
  配置変更
  webの位置を上部に持ってくる。
  projフォルダの廃止
    electron,nodejsを各フォルダに展開する
17
  task-managerに必要な情報
  上層部
    task一覧
  中層部
    name:
      taskname:
        progress: 進行中、保留、問題有り、未着手、一旦戻す
        start_date: Date
        finish_date: Date
  下層部
    name:
12
  一旦保留
    projectの分離 - sample projectとして、新しく作ること？
    amDevEn-sample?
07
  様子見
    1. AutoEvent generatorからpromiseへ移行考慮
      http://qiita.com/kidach1/items/d997df84a0ede39d76ad
06
  AutoEventはpromiseを考える。
05
  2. port設定の独立化について
    ignore_dataに格納する・・？
    node_projにて設定出来ないの？→extendsは基本１個
      CommonJsを書き換えできないの？
        → projectに依存する？　web側問題なし。
        → node側は？requireの前に一つ挟む必要が出る。sampleもsample_projに依存しても良いと判断した。
        一旦採用
  3.electron-sampleのgitに、独自projectを容易に追加出来るようにする設計(互換性は強くは意識しない)
    projさえ分離出来るようになれば良い。
    現状
    ./contents/proj/ にサンプルプロジェクトを投入しているが、gitに登録されている
    変更すると、分離出来ないため、
    1. proj_igonore_shogi/のようなdirectoryを作る。
      directory構成が変わるため、全体のmodule import に影響が出る
    2. contents/projをignoreしてしまう。 →　良さそう。
      projの管理さえしっかり行えれば、sample,productの切り替えが容易になる。
      projを入れることを必須とする。readmeに記入
      → ローカルで、同一のelectron-sampleが出来たため、githubforwindowsで同一のものとして扱われた。(区別していない)
    3. contents/new_proj/として分離する。
      初期ポート設定、projectのディレクトリ設定をignore_dataで、browser.csonと同様に設定出来るようにする。（無ければ作成)
      new_projをignoreしておく。
      →　new_projにgitを追加していく
      →　完全分離予定？　→　思った以上に面倒で難しい。。。
      portの設定について
        portはsampleに影響しないところで設定できたほうが良い。
        クライアントに飛ばすときに、そのデータを渡す必要がある。
        ignore_dataをアクセス可能にするか？
          →cson形式で管理する予定。
          危険性は？
      →projを単に無視するだけでは？　挑戦
04
  vanillajs早っっ
  vanilla考慮するが、書き方はjQueryが優秀。jQueryやSprintに期待を寄せるか、もしくは生jsから寄せていくか考慮
03
  気が向いたらやる
    4. (要考慮) callbackの閉じカッコは最終行にすることでfoldしたときに１行として扱われる
      →　段をずらして、同一インデントにすることでも解決した。(atom editor)
  起動時のみgazeすることで意外と早くなった
    2. sassを使わずcss+CoffeeUIクラスを作ることを考慮
05/02
  instant.coffee 更新無し、即時実行js
  全体を大きく変更し進化するのも重要だが、今動いているということも重要。
30
  sassを使わずcss+CoffeeUIクラスを作ることを考慮
  次回プロジェクトより
  それとは別にwatcherの統合が必要
  watchは基本的に、起動時に１回のみ#（メモリリークが解消されるまで）
  reloadイベントも同様に絡める
19
  http://memo.yomukaku.net/entries/uuptBYV
  child_process.execを使い、連携する。
  javaや多言語との繋がりでもこれは多用すると思われる。
2015/04/11
  coffeeのみを渡していく方針 →　再却下
  パッケージ化をなるべくやっていくが、開発環境を更新する。
  Atom-Shell-Sample
  名前考慮したが、間違えたままとりあえず開発。いずれcloneし、正式名称を考える。
2015/03/
  クロスレンダラーアプリを作る
    必要な部品
      発火イベント
        埋め込みhtml側
          →ブラウザのみに送る
            ipcから、"send_browser"を指定し、データを送る
          →別レンダラーに送りたい場合
            ipcから、"send_(renderer)_via_browser"を指定し、データを送る
        メインブラウザ
          →各ブラウザへ送りたい場合
            BrowserWindowから、"send_renderer"を指定し、メッセージを送る
        外部サイトを表示するレンダラー
          起動時にブラウザがスクリプトコードを埋め込む
            →ipcを含んだ構文を埋め込む グローバルオブジェクトとしてipcを含める、(onEventは、双方向返答待ちイベントを含む場合に必須)
            →ブラウザのみに送る
              →特定のイベントハンドラにより、ipcを実行し、"send_browser"を指定し、データを送る
            →別レンダラーへ送る
              →特定のイベントハンドラにより、ipcを実行し、"send_(renderer)_via_browser"を指定し、データを送る
      要構想
        発火イベントの指定方法
          channelを個別に分ける方法
          channelを一括りにし、ブラウザもしくはレンダラ側で判別させる方法
            仮採用、F4再起動が減る、ブラウザの更新だけで住むことが多い
            →それならば、コード埋め込み自体も、埋め込みhtmlで実装する？？？
            メリット
              ファイル更新のみで実行可能、コンソールも見れる。;/この機能は欲しい。/
            デメリット
              ２つのレンダラーが、別々のサイトであった場合、そもそもがやりにくくなる。
                →元々が、ファイル更新再起動が難しい物である
            両方達成が基本
            1
        ２つのレンダラ支配から、３つ以上のレンダラを支配する可能性がある
          要対応
        Browser側のclass拡張
        発火イベントの名前
          rendererとbrowserをどのような名前でいくか
      #
      1
  複数プロジェクトを持つSampleAppを作る
    #classes
    New - CrossRenderer - AtomApp
            ↓
          CrossRenderer派生
    #main.coffee
    if 最上位
      ...
    else 最下位
      ...
    #
